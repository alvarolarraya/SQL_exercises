--CREAR TABLAS EJEMPLO
CREATE TABLE CINE (
CINE VARCHAR2(10),
CIUDAD_CINE VARCHAR2(15),
DIRECCION_CINE VARCHAR2(15),
CONSTRAINT PK_CINE PRIMARY KEY (CINE)
);

CREATE TABLE CINE_PRUEBA (
EVENTO VARCHAR2(15),
OLD_CINE VARCHAR2(10),
OLD_CIUDAD_CINE VARCHAR2(15),
OLD_DIRECCION_CINE VARCHAR2(15),
NEW_CINE VARCHAR2(10),
NEW_CIUDAD_CINE VARCHAR2(15),
NEW_DIRECCION_CINE VARCHAR2(15)
);

--PRUEBAS OLD NEW--
CREATE OR REPLACE TRIGGER prueba_before_insert
BEFORE
INSERT ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('BEFORE INSERT',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

CREATE OR REPLACE TRIGGER prueba_after_insert
AFTER
INSERT ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('AFTER INSERT',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

INSERT INTO CINE VALUES ('GOLEM','PAMPLONA','MOREA');
SELECT * FROM CINE_PRUEBA;

CREATE OR REPLACE TRIGGER prueba_before_update
BEFORE
UPDATE ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('BEFORE UPDATE',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

CREATE OR REPLACE TRIGGER prueba_after_update
AFTER
UPDATE ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('AFTER UPDATE',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

UPDATE CINE
SET CINE= 'YELMO', CIUDAD_CINE = 'HUARTE', DIRECCION_CINE='ITAROA';
SELECT * FROM CINE_PRUEBA;

CREATE OR REPLACE TRIGGER prueba_before_delete
BEFORE
DELETE ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('BEFORE DELETE',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

CREATE OR REPLACE TRIGGER prueba_after_delete
AFTER
DELETE ON CINE
FOR EACH ROW
BEGIN
    INSERT INTO CINE_PRUEBA VALUES('AFTER DELETE',:OLD.CINE,:OLD.CIUDAD_CINE,:OLD.DIRECCION_CINE,:NEW.CINE,:NEW.CIUDAD_CINE,:NEW.DIRECCION_CINE);
END;
/

DELETE FROM CINE;
SELECT * FROM CINE_PRUEBA;

-- Ejemplos con nueva tabla y triggers --

CREATE TABLE SALA (
CINE VARCHAR2(10),
SALA NUMBER,
AFORO NUMBER,
CONSTRAINT PK_SALA PRIMARY KEY (CINE,SALA),
CONSTRAINT FK_SALA FOREIGN KEY (CINE) REFERENCES CINE (CINE)
);

--DROP TRIGGER alta_cine;
CREATE OR REPLACE TRIGGER alta_cine
AFTER INSERT ON CINE 
FOR EACH ROW
BEGIN
	INSERT INTO SALA VALUES (:NEW.CINE, 0, 30);
END;
/

-- PROBAMOS A INSERTAR UN CINE
INSERT INTO CINE VALUES ('GOLEM','PAMPLONA','MOREA');
-- Y COMPROBAR CINE Y SALA
SELECT * FROM CINE JOIN SALA ON CINE.CINE = SALA.CINE;

DELETE FROM CINE;--ERROR

--Ejemplos actualización en cascada UPDATE CASCADE - P2; DELETE FROM SALA
CREATE OR REPLACE TRIGGER cambia_cine
BEFORE UPDATE OF cine ON cine 
FOR EACH ROW
BEGIN
	UPDATE sala SET cine = :new.cine 
	WHERE cine = :old.cine;
END;
/

UPDATE CINE
SET CINE= 'YELMO', CIUDAD_CINE = 'HUARTE', DIRECCION_CINE='ITAROA';
SELECT * FROM CINE JOIN SALA ON CINE.CINE = SALA.CINE;

--Ejemplo: eliminacion
CREATE OR REPLACE TRIGGER baja_cine
BEFORE DELETE ON cine 
FOR EACH ROW
BEGIN
    UPDATE sala SET cine = 'DE BAJA'
	WHERE cine = :old.cine;
	/*DELETE FROM SALA
    WHERE cine=:old.cine;*/
END;
/

DELETE FROM CINE;
SELECT * FROM CINE;

-- actualizacion nivel tabla
CREATE TABLE estadisticas (
nombre_tabla VARCHAR2(15),
nActualizaciones NUMBER DEFAULT 0
);

INSERT INTO ESTADISTICAS (nombre_tabla) VALUES ('cine');

CREATE OR REPLACE TRIGGER cuenta_update_cine
BEFORE UPDATE ON cine
BEGIN
	UPDATE estadisticas SET nActualizaciones = nActualizaciones + 1
	WHERE nombre_tabla = 'cine';
END;
/

UPDATE CINE
SET CINE= 'YELMO', CIUDAD_CINE = 'HUARTE', DIRECCION_CINE='ITAROA';
SELECT * FROM ESTADISTICAS;

-- Ejemplos PL/SQL
--DROP TABLE empleados;
CREATE TABLE empleados (
dni char (4),
nomemp varchar2 (15),
codjefe char (4),
CONSTRAINT pk_emple PRIMARY KEY (dni),
CONSTRAINT fk_emple FOREIGN KEY (codjefe)
REFERENCES empleados on delete cascade);

CREATE OR REPLACE TRIGGER jefes
BEFORE INSERT ON empleados
FOR EACH ROW
DECLARE
supervisa INTEGER;
BEGIN
SELECT count(*) INTO supervisa
FROM empleados
WHERE codjefe = :new.codjefe;
   IF supervisa > 4 THEN
      raise_application_error (-20600,:new.codjefe||'no se puede supervisar más de 5');
   END IF;
END;
/

INSERT INTO EMPLEADOS VALUES ('1','PEPE',null);
INSERT INTO EMPLEADOS VALUES ('2','PEPE1','1');
INSERT INTO EMPLEADOS VALUES ('3','PEPE2','1');
INSERT INTO EMPLEADOS VALUES ('4','PEPE3','1');
INSERT INTO EMPLEADOS VALUES ('5','PEPE4','1');
INSERT INTO EMPLEADOS VALUES ('6','PEPE5','1');
INSERT INTO EMPLEADOS VALUES ('7','PEPE6','1');
SELECT * FROM EMPLEADOS;

-- Ejemplo 2 PL/SQL
ALTER TABLE empleados ADD salario integer DEFAULT 1000;

CREATE OR REPLACE TRIGGER aumento_Salario
AFTER UPDATE OF salario ON empleados
FOR EACH ROW
BEGIN
	IF :NEW.salario > :OLD.salario*1.20 THEN
    raise_application_error (-20700,:new.dni||'no se puede aumentar el salario más de un 20%');
END IF;
END;
/

UPDATE empleados SET salario=salario*1.21 WHERE dni='1';

--Ejemplo PL/SQL baja
-- DROP TABLE empleados_baja;
CREATE TABLE empleados_baja
(dni char(4),
nomemp varchar2(15),
cojefe char(4),
salario integer,
usuario varchar2(15),
fecha date,
CONSTRAINT pk_emple_baja PRIMARY KEY (dni));

CREATE OR REPLACE TRIGGER bajas
AFTER DELETE ON empleados
FOR EACH ROW
BEGIN
	INSERT INTO empleados_baja VALUES (:old.dni,:old.nomemp,:old.codjefe,:old.salario, USER, SYSDATE);
END;
/

DELETE FROM empleados;

--Ejemplo ERROR tablas mutantes
--DROP TRIGGER alta_cine;
CREATE OR REPLACE TRIGGER alta_cine
AFTER INSERT ON CINE 
FOR EACH ROW
BEGIN
	UPDATE CINE SET CIUDAD_CINE =:OLD.CIUDAD_CINE;
END;
/

INSERT INTO CINE VALUES ('GOLEM','PAMPLONA','MOREA');



